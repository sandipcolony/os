slip 13
1.
#include<stdio.h>

int main()
{
	int allocation[100][100],max[100][100],need[100][100],i,j,k,y,pr,rs,cnt;
	int available[100],safe_state[100];
	
	printf("\n Enter No. of Processes : ");
	scanf("%d",&pr);
	
	printf("\n Enter No. of Resources : ");
	scanf("%d",&rs);
	
	printf("\n Enter Allocation Data : ");
	for(i=0;i<pr;i++)
	{
		for(j=0;j<rs;j++)
		{
			scanf("%d",&allocation[i][j]);
		}
	}	

	printf("\n Enter Max Data : ");
	for(i=0;i<pr;i++)
	{
		for(j=0;j<rs;j++)
		{
			scanf("%d",&max[i][j]);
		}
	}
	
	// for Need 
	for(i=0;i<pr;i++)
	{
		for(j=0;j<rs;j++)
		{
			need[i][j] = max[i][j] - allocation[i][j];
		}
	}
	
	for(i=0;i<pr;i++)
	{
		printf("\n");
		for(j=0;j<rs;j++)
		{
			printf(" %d ",need[i][j]);
		}
	}

	printf("\n Enter Available Resources : ");
	for(j=0;j<rs;j++)
	{
		printf("\n %c : ",j+65);
		scanf("%d",&available[j]);
	}

	y=0;
	for(k=0;k<pr && y!=pr;k++)
	{
		for (i=0;i<pr;i++) 
		{
			cnt=0;
			
			for(j=0;j<rs;j++) 
			{
				if(need[i][j]<=available[j])
				{
				 	cnt++;
				}
			}
			
			if(cnt==rs) 
			{
				safe_state[y++]=i;
				
				for(j=0;j<rs;j++)
				{
					available[j]=available[j] + allocation[i][j];
					need[i][j] = 9999;
				}
			} 
		}
	}
				
	if(y==pr)
	{
		printf("\n System is in Safe State : ");
		for(i=0;i<pr;i++)
		{
			printf(" P%d ",safe_state[i]);
		}
	}
	else
	{
		printf("\n System is not in Safe State");
	}
	
	return 0;
}

2.
#include<stdio.h>

int main()
{
    int RQ[100],i,j,n,TotalHeadMoment=0,initial,size,move,temp;

    printf("\n Enter the number of Requests : ");
    scanf("%d",&n);

    printf("\n Enter the Requests sequence : ");
    for(i=0;i<n;i++)
	{
	    scanf("%d",&RQ[i]);
	}
	
	printf("\n Enter initial head position : ");
    scanf("%d",&initial);
    
	printf("\n Enter total disk size : ");
    scanf("%d",&size);
    
	printf("\n Enter the head movement direction for Right 1 and for Left 0 : ");
    scanf("%d",&move); 
    
    for(i=1;i<n;i++)
    {
        for(j=0;j<n-i;j++)
        {
            if(RQ[j]>RQ[j+1])
            {
                temp=RQ[j];
                RQ[j]=RQ[j+1];
                RQ[j+1]=temp;
            }
        }
    }

    int index;
    for(i=0;i<n;i++)
    {
        if(initial<RQ[i])
        {
            index=i;
            break;
        }
    }

    if(move==1)
    {
        for(i=index;i<n;i++)
        {
            TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
            initial=RQ[i];
        }

        TotalHeadMoment=TotalHeadMoment+abs(size-RQ[i-1]-1);
        initial = size-1;
        
        for(i=index-1;i>=0;i--)
        {
             TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
             initial=RQ[i];
        }
    }
    else
    {
        for(i=index-1;i>=0;i--)
        {
            TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
            initial=RQ[i];
        }

        TotalHeadMoment=TotalHeadMoment+abs(RQ[i+1]-0);
        initial =0;
        
        for(i=index;i<n;i++)
        {
             TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
             initial=RQ[i];
        }
    }
    
    printf("\n Total head movement is : %d",TotalHeadMoment);
    
	return 0;
}