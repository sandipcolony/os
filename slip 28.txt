slip 28
1.
#include<stdio.h>

int main()
{
    int RQ[100],i,j,n,TotalHeadMoment=0,initial,size,move,temp;

    printf("\n Enter the number of Requests : ");
    scanf("%d",&n);

    printf("\n Enter the Requests sequence : ");
    for(i=0;i<n;i++)
	{
	    scanf("%d",&RQ[i]);
	}
	
    printf("\n Enter initial head position : ");
    scanf("%d",&initial);
    
	printf("Enter total disk size\n");
    scanf("%d",&size);
    
	printf("\n Enter the head movement direction for Right 1 and for Left 0 : ");
    scanf("%d",&move);
    
    for(i=1;i<n;i++)
    {
        for(j=0;j<n-i;j++)
        {
            if(RQ[j]>RQ[j+1])
            {
                temp=RQ[j];
                RQ[j]=RQ[j+1];
                RQ[j+1]=temp;
            }
        }
    }

    int index;
    for(i=0;i<n;i++)
    {
        if(initial<RQ[i])
        {
            index=i;
            break;
        }
    }
  
    if(move==1)
    {
        for(i=index;i<n;i++)
        {
            TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
            initial=RQ[i];
        }
        
        for(i=0;i<index;i++)
        {
             TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
             initial=RQ[i];            
        }
    }
    else
    {
        for(i=0;i<index;i++)
		{
            TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
            initial=RQ[i];
        }
        
        for(i=index;i<n;i++)
        {
             TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
             initial=RQ[i];        
        }
    }
    
    printf("\n Total head movement is : %d",TotalHeadMoment);
    
	return 0;
}
2.
#include<mpi.h>
#include<stdio.h>
#include<stdlib.h>

void allocate(int a[],int n)
{
	int i;
	
	for(i=0;i<n;i++)
	{
		a[i]=rand()%50;
	}
}

int main(int argc, char *argv[])
{
	int rank,size,n,sum=0,count,*a=NULL,i;
	
	rand();
	
	MPI_Init(&argc,&argv);
	MPI_Comm_size(MPI_COMM_WORLD,&size);
	MPI_Comm_rank(MPI_COMM_WORLD,&rank);
	
	n=atoi(argv[1]);
	
	printf("\n Size = %d \t Rank = %d \t n = %d \n",size,rank,n);
	count=n/size;
	
	if(rank==0)
	{
		a=(int *) malloc(n*sizeof(int));
		allocate(a,n);
	}
	
	for(i=0;i<count;i++)
	{
		printf("\t%d",a[i]);
		sum=sum+a[i];
	}
	
	printf("\n Sum = %d",sum);
	
	MPI_Finalize();
	
	return 0;
}

